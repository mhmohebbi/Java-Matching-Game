/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MatchingGame;

import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * File Name: U2A3A1_MatchingGame
 * Author: Hossein Mohebbi 
 * Description: This program uses arrays to create a simple card matching game using personalized pictures. 
 *              The theme for this matching game is basketball, specifically the different faces of NBA players.
 */
public class MatchingGameUI extends javax.swing.JFrame {

    ArrayList<String> cards = new ArrayList();
    ArrayList<String> set = new ArrayList();
    ImageIcon a = new ImageIcon("nash.jpg");
    ImageIcon b = new ImageIcon("lebron.jpg");
    ImageIcon c = new ImageIcon("kobe.jpg");
    ImageIcon d = new ImageIcon("KD.jpg");
    ImageIcon e = new ImageIcon("curry.jpg");
    ImageIcon f = new ImageIcon("jordan.jpg");
    ImageIcon g = new ImageIcon("cp3.jpg");
    ImageIcon h = new ImageIcon("butler.jpg");
    ImageIcon i = new ImageIcon("westbrook.jpg");
    ImageIcon j = new ImageIcon("kyrie.jpg");
    ImageIcon back = new ImageIcon("cardback.jpg");
    ImageIcon done = new ImageIcon("done.jpg");
    int count, c1, c2, choice1, choice2;
    int cardsLeft = 20;
    int[] change = new int[20];
    int turns = 0;

    /**
     * Creates new form MatchingGameUI
     */
    public MatchingGameUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        card17 = new javax.swing.JButton();
        card18 = new javax.swing.JButton();
        card1 = new javax.swing.JButton();
        card19 = new javax.swing.JButton();
        card2 = new javax.swing.JButton();
        card20 = new javax.swing.JButton();
        card3 = new javax.swing.JButton();
        outputCardsRemaining = new javax.swing.JTextField();
        card4 = new javax.swing.JButton();
        card5 = new javax.swing.JButton();
        outputTurns = new javax.swing.JTextField();
        card6 = new javax.swing.JButton();
        card7 = new javax.swing.JButton();
        card8 = new javax.swing.JButton();
        card9 = new javax.swing.JButton();
        card10 = new javax.swing.JButton();
        card11 = new javax.swing.JButton();
        card12 = new javax.swing.JButton();
        card13 = new javax.swing.JButton();
        card14 = new javax.swing.JButton();
        card15 = new javax.swing.JButton();
        card16 = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        guessButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Matching Game");

        card17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card17.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card17MouseClicked(evt);
            }
        });

        card18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card18.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card18MouseClicked(evt);
            }
        });

        card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card1.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card1MouseClicked(evt);
            }
        });

        card19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card19.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card19MouseClicked(evt);
            }
        });

        card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card2.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card2MouseClicked(evt);
            }
        });

        card20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card20.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card20MouseClicked(evt);
            }
        });

        card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card3.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card3MouseClicked(evt);
            }
        });

        outputCardsRemaining.setEditable(false);
        outputCardsRemaining.setText("Cards Remaining: 20");
        outputCardsRemaining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputCardsRemainingActionPerformed(evt);
            }
        });

        card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card4.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card4MouseClicked(evt);
            }
        });

        card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card5.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card5MouseClicked(evt);
            }
        });

        outputTurns.setEditable(false);
        outputTurns.setText("Turns Taken: 0");

        card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card6.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card6MouseClicked(evt);
            }
        });

        card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card7.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card7MouseClicked(evt);
            }
        });

        card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card8.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card8MouseClicked(evt);
            }
        });

        card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card9.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card9MouseClicked(evt);
            }
        });

        card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card10.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card10MouseClicked(evt);
            }
        });

        card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card11.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card11MouseClicked(evt);
            }
        });

        card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card12.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card12MouseClicked(evt);
            }
        });

        card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card13.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card13MouseClicked(evt);
            }
        });

        card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card14.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card14MouseClicked(evt);
            }
        });

        card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card15.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card15MouseClicked(evt);
            }
        });

        card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MatchingGame/cardback.jpg"))); // NOI18N
        card16.setMargin(new java.awt.Insets(15, 15, 15, 15));
        card16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                card16MouseClicked(evt);
            }
        });

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        guessButton.setText("Guess Again");
        guessButton.setEnabled(false);
        guessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(card6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(card11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(card15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(card16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(card17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(outputCardsRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(card18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(card19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(card20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(outputTurns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(exitButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(card4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(guessButton)))
                                .addGap(46, 46, 46)))
                        .addComponent(card5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guessButton)
                    .addComponent(playButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(card3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(card6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(card8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(card9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(card10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(card11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(card16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(card18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(card19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputCardsRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputTurns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //To make the game a little more clear, a message panel instructing the user to only pick 2 cards was made using an if statement as seen in the statements below

    private void card17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card17MouseClicked
        String temp = cards.get(16);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[16] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card17.setIcon(a);
                    break;
                case "1":
                    card17.setIcon(b);
                    break;
                case "2":
                    card17.setIcon(c);
                    break;
                case "3":
                    card17.setIcon(d);
                    break;
                case "4":
                    card17.setIcon(e);
                    break;
                case "5":
                    card17.setIcon(f);
                    break;
                case "6":
                    card17.setIcon(g);
                    break;
                case "7":
                    card17.setIcon(h);
                    break;
                case "8":
                    card17.setIcon(i);
                    break;
                case "9":
                    card17.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[16] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[16] = 0;
            }
        }
    }//GEN-LAST:event_card17MouseClicked

    private void card18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card18MouseClicked
        String temp = cards.get(17);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[17] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card18.setIcon(a);
                    break;
                case "1":
                    card18.setIcon(b);
                    break;
                case "2":
                    card18.setIcon(c);
                    break;
                case "3":
                    card18.setIcon(d);
                    break;
                case "4":
                    card18.setIcon(e);
                    break;
                case "5":
                    card18.setIcon(f);
                    break;
                case "6":
                    card18.setIcon(g);
                    break;
                case "7":
                    card18.setIcon(h);
                    break;
                case "8":
                    card18.setIcon(i);
                    break;
                case "9":
                    card18.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[17] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[17] = 0;
            }
        }
    }//GEN-LAST:event_card18MouseClicked

    private void card1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card1MouseClicked
        String temp = cards.get(0);

        if (count == 2) { //if they've chosen more than 2 cards
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards"); //output that they can't pick more than 2 cards
        } else if (change[0] == 2) { //if they chose a card that has already been chosen
            JOptionPane.showMessageDialog(null, "You have already found that pair"); //output that they have already found that pair of cards
        } else {

            switch (temp) { //sets the card icons
                case "0":
                    card1.setIcon(a);
                    break;
                case "1":
                    card1.setIcon(b);
                    break;
                case "2":
                    card1.setIcon(c);
                    break;
                case "3":
                    card1.setIcon(d);
                    break;
                case "4":
                    card1.setIcon(e);
                    break;
                case "5":
                    card1.setIcon(f);
                    break;
                case "6":
                    card1.setIcon(g);
                    break;
                case "7":
                    card1.setIcon(h);
                    break;
                case "8":
                    card1.setIcon(i);
                    break;
                case "9":
                    card1.setIcon(j);
                    break;
                default:
                    break;
            }

            count++; //increases the counter
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[0] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[0] = 0;
            }
        } //these comments apply to all of the card mouse clicked events
    }//GEN-LAST:event_card1MouseClicked

    private void card19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card19MouseClicked
        String temp = cards.get(18);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[18] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card19.setIcon(a);
                    break;
                case "1":
                    card19.setIcon(b);
                    break;
                case "2":
                    card19.setIcon(c);
                    break;
                case "3":
                    card19.setIcon(d);
                    break;
                case "4":
                    card19.setIcon(e);
                    break;
                case "5":
                    card19.setIcon(f);
                    break;
                case "6":
                    card19.setIcon(g);
                    break;
                case "7":
                    card19.setIcon(h);
                    break;
                case "8":
                    card19.setIcon(i);
                    break;
                case "9":
                    card19.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[18] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[18] = 0;
            }
        }
    }//GEN-LAST:event_card19MouseClicked

    private void card2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card2MouseClicked
        String temp = cards.get(1);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[1] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card2.setIcon(a);
                    break;
                case "1":
                    card2.setIcon(b);
                    break;
                case "2":
                    card2.setIcon(c);
                    break;
                case "3":
                    card2.setIcon(d);
                    break;
                case "4":
                    card2.setIcon(e);
                    break;
                case "5":
                    card2.setIcon(f);
                    break;
                case "6":
                    card2.setIcon(g);
                    break;
                case "7":
                    card2.setIcon(h);
                    break;
                case "8":
                    card2.setIcon(i);
                    break;
                case "9":
                    card2.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[1] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[1] = 0;
            }
        }
    }//GEN-LAST:event_card2MouseClicked

    private void card20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card20MouseClicked
        String temp = cards.get(19);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[19] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card20.setIcon(a);
                    break;
                case "1":
                    card20.setIcon(b);
                    break;
                case "2":
                    card20.setIcon(c);
                    break;
                case "3":
                    card20.setIcon(d);
                    break;
                case "4":
                    card20.setIcon(e);
                    break;
                case "5":
                    card20.setIcon(f);
                    break;
                case "6":
                    card20.setIcon(g);
                    break;
                case "7":
                    card20.setIcon(h);
                    break;
                case "8":
                    card20.setIcon(i);
                    break;
                case "9":
                    card20.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[19] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[19] = 0;
            }
        }
    }//GEN-LAST:event_card20MouseClicked

    private void card3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card3MouseClicked
        String temp = cards.get(2);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[2] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card3.setIcon(a);
                    break;
                case "1":
                    card3.setIcon(b);
                    break;
                case "2":
                    card3.setIcon(c);
                    break;
                case "3":
                    card3.setIcon(d);
                    break;
                case "4":
                    card3.setIcon(e);
                    break;
                case "5":
                    card3.setIcon(f);
                    break;
                case "6":
                    card3.setIcon(g);
                    break;
                case "7":
                    card3.setIcon(h);
                    break;
                case "8":
                    card3.setIcon(i);
                    break;
                case "9":
                    card3.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[2] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[2] = 0;
            }
        }
    }//GEN-LAST:event_card3MouseClicked

    private void card4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card4MouseClicked
        String temp = cards.get(3);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[3] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card4.setIcon(a);
                    break;
                case "1":
                    card4.setIcon(b);
                    break;
                case "2":
                    card4.setIcon(c);
                    break;
                case "3":
                    card4.setIcon(d);
                    break;
                case "4":
                    card4.setIcon(e);
                    break;
                case "5":
                    card4.setIcon(f);
                    break;
                case "6":
                    card4.setIcon(g);
                    break;
                case "7":
                    card4.setIcon(h);
                    break;
                case "8":
                    card4.setIcon(i);
                    break;
                case "9":
                    card4.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[3] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[3] = 0;
            }
        }
    }//GEN-LAST:event_card4MouseClicked

    private void card5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card5MouseClicked
        String temp = cards.get(4);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[4] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card5.setIcon(a);
                    break;
                case "1":
                    card5.setIcon(b);
                    break;
                case "2":
                    card5.setIcon(c);
                    break;
                case "3":
                    card5.setIcon(d);
                    break;
                case "4":
                    card5.setIcon(e);
                    break;
                case "5":
                    card5.setIcon(f);
                    break;
                case "6":
                    card5.setIcon(g);
                    break;
                case "7":
                    card5.setIcon(h);
                    break;
                case "8":
                    card5.setIcon(i);
                    break;
                case "9":
                    card5.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[4] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[4] = 0;
            }
        }
    }//GEN-LAST:event_card5MouseClicked

    private void card6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card6MouseClicked
        String temp = cards.get(5);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[5] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card6.setIcon(a);
                    break;
                case "1":
                    card6.setIcon(b);
                    break;
                case "2":
                    card6.setIcon(c);
                    break;
                case "3":
                    card6.setIcon(d);
                    break;
                case "4":
                    card6.setIcon(e);
                    break;
                case "5":
                    card6.setIcon(f);
                    break;
                case "6":
                    card6.setIcon(g);
                    break;
                case "7":
                    card6.setIcon(h);
                    break;
                case "8":
                    card6.setIcon(i);
                    break;
                case "9":
                    card6.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[5] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[5] = 0;
            }
        }
    }//GEN-LAST:event_card6MouseClicked

    private void card7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card7MouseClicked
        String temp = cards.get(6);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[6] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card7.setIcon(a);
                    break;
                case "1":
                    card7.setIcon(b);
                    break;
                case "2":
                    card7.setIcon(c);
                    break;
                case "3":
                    card7.setIcon(d);
                    break;
                case "4":
                    card7.setIcon(e);
                    break;
                case "5":
                    card7.setIcon(f);
                    break;
                case "6":
                    card7.setIcon(g);
                    break;
                case "7":
                    card7.setIcon(h);
                    break;
                case "8":
                    card7.setIcon(i);
                    break;
                case "9":
                    card7.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[6] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[6] = 0;
            }
        }
    }//GEN-LAST:event_card7MouseClicked

    private void card8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card8MouseClicked
        String temp = cards.get(7);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[7] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card8.setIcon(a);
                    break;
                case "1":
                    card8.setIcon(b);
                    break;
                case "2":
                    card8.setIcon(c);
                    break;
                case "3":
                    card8.setIcon(d);
                    break;
                case "4":
                    card8.setIcon(e);
                    break;
                case "5":
                    card8.setIcon(f);
                    break;
                case "6":
                    card8.setIcon(g);
                    break;
                case "7":
                    card8.setIcon(h);
                    break;
                case "8":
                    card8.setIcon(i);
                    break;
                case "9":
                    card8.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[7] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[7] = 0;
            }
        }
    }//GEN-LAST:event_card8MouseClicked

    private void card9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card9MouseClicked
        String temp = cards.get(8);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[8] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card9.setIcon(a);
                    break;
                case "1":
                    card9.setIcon(b);
                    break;
                case "2":
                    card9.setIcon(c);
                    break;
                case "3":
                    card9.setIcon(d);
                    break;
                case "4":
                    card9.setIcon(e);
                    break;
                case "5":
                    card9.setIcon(f);
                    break;
                case "6":
                    card9.setIcon(g);
                    break;
                case "7":
                    card9.setIcon(h);
                    break;
                case "8":
                    card9.setIcon(i);
                    break;
                case "9":
                    card9.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[8] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[8] = 0;
            }
        }
    }//GEN-LAST:event_card9MouseClicked

    private void card10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card10MouseClicked
        String temp = cards.get(9);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[9] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card10.setIcon(a);
                    break;
                case "1":
                    card10.setIcon(b);
                    break;
                case "2":
                    card10.setIcon(c);
                    break;
                case "3":
                    card10.setIcon(d);
                    break;
                case "4":
                    card10.setIcon(e);
                    break;
                case "5":
                    card10.setIcon(f);
                    break;
                case "6":
                    card10.setIcon(g);
                    break;
                case "7":
                    card10.setIcon(h);
                    break;
                case "8":
                    card10.setIcon(i);
                    break;
                case "9":
                    card10.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[9] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[9] = 0;
            }
        }
    }//GEN-LAST:event_card10MouseClicked

    private void card11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card11MouseClicked
        String temp = cards.get(10);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[10] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card11.setIcon(a);
                    break;
                case "1":
                    card11.setIcon(b);
                    break;
                case "2":
                    card11.setIcon(c);
                    break;
                case "3":
                    card11.setIcon(d);
                    break;
                case "4":
                    card11.setIcon(e);
                    break;
                case "5":
                    card11.setIcon(f);
                    break;
                case "6":
                    card11.setIcon(g);
                    break;
                case "7":
                    card11.setIcon(h);
                    break;
                case "8":
                    card11.setIcon(i);
                    break;
                case "9":
                    card11.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[10] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[10] = 0;
            }
        }
    }//GEN-LAST:event_card11MouseClicked

    private void card12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card12MouseClicked
        String temp = cards.get(11);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[11] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card12.setIcon(a);
                    break;
                case "1":
                    card12.setIcon(b);
                    break;
                case "2":
                    card12.setIcon(c);
                    break;
                case "3":
                    card12.setIcon(d);
                    break;
                case "4":
                    card12.setIcon(e);
                    break;
                case "5":
                    card12.setIcon(f);
                    break;
                case "6":
                    card12.setIcon(g);
                    break;
                case "7":
                    card12.setIcon(h);
                    break;
                case "8":
                    card12.setIcon(i);
                    break;
                case "9":
                    card12.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[11] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[11] = 0;
            }
        }
    }//GEN-LAST:event_card12MouseClicked

    private void card13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card13MouseClicked
        String temp = cards.get(12);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[12] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card13.setIcon(a);
                    break;
                case "1":
                    card13.setIcon(b);
                    break;
                case "2":
                    card13.setIcon(c);
                    break;
                case "3":
                    card13.setIcon(d);
                    break;
                case "4":
                    card13.setIcon(e);
                    break;
                case "5":
                    card13.setIcon(f);
                    break;
                case "6":
                    card13.setIcon(g);
                    break;
                case "7":
                    card13.setIcon(h);
                    break;
                case "8":
                    card13.setIcon(i);
                    break;
                case "9":
                    card13.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[12] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[12] = 0;
            }
        }
    }//GEN-LAST:event_card13MouseClicked

    private void card14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card14MouseClicked
        String temp = cards.get(13);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[13] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card14.setIcon(a);
                    break;
                case "1":
                    card14.setIcon(b);
                    break;
                case "2":
                    card14.setIcon(c);
                    break;
                case "3":
                    card14.setIcon(d);
                    break;
                case "4":
                    card14.setIcon(e);
                    break;
                case "5":
                    card14.setIcon(f);
                    break;
                case "6":
                    card14.setIcon(g);
                    break;
                case "7":
                    card14.setIcon(h);
                    break;
                case "8":
                    card14.setIcon(i);
                    break;
                case "9":
                    card14.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[13] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[13] = 0;
            }
        }
    }//GEN-LAST:event_card14MouseClicked

    private void card15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card15MouseClicked
        String temp = cards.get(14);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[14] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card15.setIcon(a);
                    break;
                case "1":
                    card15.setIcon(b);
                    break;
                case "2":
                    card15.setIcon(c);
                    break;
                case "3":
                    card15.setIcon(d);
                    break;
                case "4":
                    card15.setIcon(e);
                    break;
                case "5":
                    card15.setIcon(f);
                    break;
                case "6":
                    card15.setIcon(g);
                    break;
                case "7":
                    card15.setIcon(h);
                    break;
                case "8":
                    card15.setIcon(i);
                    break;
                case "9":
                    card15.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[14] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[14] = 0;
            }
        }
    }//GEN-LAST:event_card15MouseClicked

    private void card16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_card16MouseClicked
        String temp = cards.get(15);

        if (count == 2) {
            JOptionPane.showMessageDialog(null, "You can't pick more than 2 cards");
        } else if (change[15] == 2) {
            JOptionPane.showMessageDialog(null, "You have already found that pair");
        } else {

            switch (temp) {
                case "0":
                    card16.setIcon(a);
                    break;
                case "1":
                    card16.setIcon(b);
                    break;
                case "2":
                    card16.setIcon(c);
                    break;
                case "3":
                    card16.setIcon(d);
                    break;
                case "4":
                    card16.setIcon(e);
                    break;
                case "5":
                    card16.setIcon(f);
                    break;
                case "6":
                    card16.setIcon(g);
                    break;
                case "7":
                    card16.setIcon(h);
                    break;
                case "8":
                    card16.setIcon(i);
                    break;
                case "9":
                    card16.setIcon(j);
                    break;
                default:
                    break;
            }

            count++;
            if (count == 1) {
                c1 = Integer.parseInt(temp);
                change[15] = 0;
            } else if (count == 2) {
                c2 = Integer.parseInt(temp);
                change[15] = 0;
            }
        }
    }//GEN-LAST:event_card16MouseClicked

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed

        guessButton.setEnabled(true); //enables the guess button once they start playing
        playButton.setEnabled(false); //disables the play button once they started playing

        /**
         * Set change array
         */
        for (int z = 0; z <= 19; z++) {
            change[z] = 1;
        }

        /**
         * Assign cards at random
         */
        String temp;
        for (int x = 0; x <= 9; x++) {
            for (int y = 0; y < 2; y++) {
                temp = Integer.toString(x);
                set.add(temp);
            }
        }
        for (int x = 0; x <= 19; x++) {
            double index = Math.floor(Math.random() * (20 - x));
            int index1 = (int) index;
            cards.add(set.get(index1));
            set.remove(set.get(index1));
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void guessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessButtonActionPerformed
        count = 0;
        if (c1 == c2) { //if the two cards have the same image
            for (int y = 1; y <= 2; y++) { //loops through twice: once for the first and once for the second card
                if (change[0] == 0) { //if its this card it sets its icon to done
                    card1.setIcon(done);
                    change[0] = 2;
                    cardsLeft = cardsLeft - 1; //decreases the cards remaining counter
                } else if (change[1] == 0) {
                    card2.setIcon(done);
                    change[1] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[2] == 0) {
                    card3.setIcon(done);
                    change[2] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[3] == 0) {
                    card4.setIcon(done);
                    change[3] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[4] == 0) {
                    card5.setIcon(done);
                    change[4] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[5] == 0) {
                    card6.setIcon(done);
                    change[5] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[6] == 0) {
                    card7.setIcon(done);
                    change[6] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[7] == 0) {
                    card8.setIcon(done);
                    change[7] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[8] == 0) {
                    card9.setIcon(done);
                    change[8] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[9] == 0) {
                    card10.setIcon(done);
                    change[9] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[10] == 0) {
                    card11.setIcon(done);
                    change[10] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[11] == 0) {
                    card12.setIcon(done);
                    change[11] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[12] == 0) {
                    card13.setIcon(done);
                    change[12] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[13] == 0) {
                    card14.setIcon(done);
                    change[13] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[14] == 0) {
                    card15.setIcon(done);
                    change[14] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[15] == 0) {
                    card16.setIcon(done);
                    change[15] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[16] == 0) {
                    card17.setIcon(done);
                    change[16] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[17] == 0) {
                    card18.setIcon(done);
                    change[17] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[18] == 0) {
                    card19.setIcon(done);
                    change[18] = 2;
                    cardsLeft = cardsLeft - 1;
                } else if (change[19] == 0) {
                    card20.setIcon(done);
                    change[19] = 2;
                    cardsLeft = cardsLeft - 1;
                }
                outputCardsRemaining.setText("Cards Remaining: " + cardsLeft); //updates the cards remaining
            }
            turns++; //increases the turn counter
            outputTurns.setText("Turns Taken: " + turns); //outputs the turns
            if (cardsLeft == 0) { //if there are no cards left it outputs a congratulations message
                JOptionPane.showMessageDialog(null, "Congratulations! You won in " + turns + " turns!"); //outputs the message
                System.exit(0); //once they close the congratulations message
            }
        } else { //if there isn't a pair, it flips back the cards

            for (int y = 1; y <= 2; y++) { //loops twice for both cards
                if (change[0] == 0) {
                    card1.setIcon(back); //changes the icon to the back of the card
                    change[0] = 1;
                } else if (change[1] == 0) {
                    card2.setIcon(back);
                    change[1] = 1;
                } else if (change[2] == 0) {
                    card3.setIcon(back);
                    change[2] = 1;
                } else if (change[3] == 0) {
                    card4.setIcon(back);
                    change[3] = 1;
                } else if (change[4] == 0) {
                    card5.setIcon(back);
                    change[4] = 1;
                } else if (change[5] == 0) {
                    card6.setIcon(back);
                    change[5] = 1;
                } else if (change[6] == 0) {
                    card7.setIcon(back);
                    change[6] = 1;
                } else if (change[7] == 0) {
                    card8.setIcon(back);
                    change[7] = 1;
                } else if (change[8] == 0) {
                    card9.setIcon(back);
                    change[8] = 1;
                } else if (change[9] == 0) {
                    card10.setIcon(back);
                    change[9] = 1;
                } else if (change[10] == 0) {
                    card11.setIcon(back);
                    change[10] = 1;
                } else if (change[11] == 0) {
                    card12.setIcon(back);
                    change[11] = 1;
                } else if (change[12] == 0) {
                    card13.setIcon(back);
                    change[12] = 1;
                } else if (change[13] == 0) {
                    card14.setIcon(back);
                    change[13] = 1;
                } else if (change[14] == 0) {
                    card15.setIcon(back);
                    change[14] = 1;
                } else if (change[15] == 0) {
                    card16.setIcon(back);
                    change[15] = 1;
                } else if (change[16] == 0) {
                    card17.setIcon(back);
                    change[16] = 1;
                } else if (change[17] == 0) {
                    card18.setIcon(back);
                    change[17] = 1;
                } else if (change[18] == 0) {
                    card19.setIcon(back);
                    change[18] = 1;
                } else if (change[19] == 0) {
                    card20.setIcon(back);
                    change[19] = 1;
                }
            }
            turns++; //increases the turn counter
            outputTurns.setText("Turns Taken: " + turns); //outputs the turns
        }
    }//GEN-LAST:event_guessButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void outputCardsRemainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputCardsRemainingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputCardsRemainingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGameUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton card1;
    private javax.swing.JButton card10;
    private javax.swing.JButton card11;
    private javax.swing.JButton card12;
    private javax.swing.JButton card13;
    private javax.swing.JButton card14;
    private javax.swing.JButton card15;
    private javax.swing.JButton card16;
    private javax.swing.JButton card17;
    private javax.swing.JButton card18;
    private javax.swing.JButton card19;
    private javax.swing.JButton card2;
    private javax.swing.JButton card20;
    private javax.swing.JButton card3;
    private javax.swing.JButton card4;
    private javax.swing.JButton card5;
    private javax.swing.JButton card6;
    private javax.swing.JButton card7;
    private javax.swing.JButton card8;
    private javax.swing.JButton card9;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton guessButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField outputCardsRemaining;
    private javax.swing.JTextField outputTurns;
    private javax.swing.JButton playButton;
    // End of variables declaration//GEN-END:variables
}
